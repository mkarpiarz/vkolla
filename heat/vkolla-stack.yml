heat_template_version: 2017-09-01

description: Multinode OpenStack deployment with Kolla and vScaler

parameters:
  image:
    type: string
    label: Instance image
    description: Image to use for instances
    default: Ubuntu-16.04-LTS
  key:
    type: string
    label: Key name
    description: Name of key-pair to be used for access to instances
  control_flavour:
    type: string
    label: Control instance flavour
    description: Flavour to use with control instances
    default: m1.medium
  network_flavour:
    type: string
    label: Network instance flavour
    description: Flavour to use with network instances
    default: m1.medium
  compute_flavour:
    type: string
    label: Compute instance flavour
    description: Flavour to use with compute instances
    default: m1.large
  storage_flavour:
    type: string
    label: Storage instance flavour
    description: Flavour to use with storage instances
    default: m1.small
  client_flavour:
    type: string
    label: Client instance flavour
    description: Flavour to use with client instances
    default: m1.small
  bastion_flavour:
    type: string
    label: Bastion instance flavour
    description: Flavour to use with the bastion
    default: m1.small
  external_network:
    type: string
    label: External network name or ID
    description: External network with floating IP addresses.
    default: public1
  main_net_cidr:
    type: string
    label: main net CIDR
    description: CIDR of the main network
    default: 192.168.17.0/24
  tunnel_net_cidr:
    type: string
    label: tunnel net CIDR
    description: CIDR of the tunnel network
    default: 172.16.0.0/24
  provider_net_cidr:
    type: string
    label: provider net CIDR
    description: CIDR of the provider network
    default: 172.18.0.0/24
  vip_net_cidr:
    type: string
    label: vip net CIDR
    description: CIDR of the VIP network
    default: 10.10.10.0/24
  internal_vip:
    type: string
    label: Internal VIP
    description: Internal load balancing VIP
    default: 192.168.17.254
  external_vip:
    type: string
    label: External VIP
    description: External load balancing VIP
    default: 10.10.10.254

resources:
  os_services_infra_client:
    type: OS::Neutron::SecurityGroup
    properties:
      description: SecGroup to assign to hosts requiring access to infrastructure services
      name: os-services-infra-client
      rules: []

  os_services_infra_server:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Open ports for infrastructure services
      name: os-services-infra-server

  rabbitmq_main_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_infra_server }
      description: RabbitMQ main port
      direction: ingress
      port_range_min: 5672
      port_range_max: 5672
      protocol: tcp
      remote_group: { get_resource: os_services_infra_client }
  rabbitmq_mgmt_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_infra_server }
      description: RabbitMQ Management console
      direction: ingress
      port_range_min: 15672
      port_range_max: 15672
      protocol: tcp
      remote_group: { get_resource: os_services_infra_client }
  rabbitmq_cluster_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_infra_server }
      description: RabbitMQ cluster
      direction: ingress
      port_range_min: 25672
      port_range_max: 25672
      protocol: tcp
      remote_group: { get_resource: os_services_infra_client }

  mysql_main_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_infra_server }
      description: MySQL/MariaDB main port
      direction: ingress
      port_range_min: 3306
      port_range_max: 3306
      protocol: tcp
      remote_group: { get_resource: os_services_infra_client }
  mysql_repl_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_infra_server }
      description: MySQL/MariaDB replication port (Galera)
      direction: ingress
      port_range_min: 4567
      port_range_max: 4567
      protocol: tcp
      remote_group: { get_resource: os_services_infra_client }

  memcached_main_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_infra_server }
      description: Memcached main port
      direction: ingress
      port_range_min: 11211
      port_range_max: 11211
      protocol: tcp
      remote_group: { get_resource: os_services_infra_client }

  haproxy_stats_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_infra_server }
      description: HAProxy statistics report
      direction: ingress
      port_range_min: 1984
      port_range_max: 1984
      protocol: tcp
      remote_group: { get_resource: os_services_infra_client }

  os_services_api_client:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Assign to hosts requiring access to OpenStack APIs
      name: os-services-api-client
      rules: []

  os_services_api_server:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Open ports for OpenStack APIs
      name: os-services-api-server

  keystone_public_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_api_server }
      description: Keystone public endpoint
      direction: ingress
      port_range_min: 5000
      port_range_max: 5000
      protocol: tcp
      remote_group: { get_resource: os_services_api_client }
  keystone_admin_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_api_server }
      description: Keystone admin endpoint
      direction: ingress
      port_range_min: 35357
      port_range_max: 35357
      protocol: tcp
      remote_group: { get_resource: os_services_api_client }

  glance_api_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_api_server }
      description: Glance API
      direction: ingress
      port_range_min: 9292
      port_range_max: 9292
      protocol: tcp
      remote_group: { get_resource: os_services_api_client }
  glance_registry_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_api_server }
      description: Glance registry
      direction: ingress
      port_range_min: 9191
      port_range_max: 9191
      protocol: tcp
      remote_group: { get_resource: os_services_api_client }

  neutron_server_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_api_server }
      description: Neutron server API
      direction: ingress
      port_range_min: 9696
      port_range_max: 9696
      protocol: tcp
      remote_group: { get_resource: os_services_api_client }

  nova_api_and_metadata_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_api_server }
      description: Nova API and Nova metadata
      direction: ingress
      port_range_min: 8774
      port_range_max: 8775
      protocol: tcp
      remote_group: { get_resource: os_services_api_client }
  placement_api_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_api_server }
      description: Placement API
      direction: ingress
      port_range_min: 8780
      port_range_max: 8780
      protocol: tcp
      remote_group: { get_resource: os_services_api_client }
  nova_novncproxy_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_api_server }
      description: Nova novncproxy
      direction: ingress
      port_range_min: 6080
      port_range_max: 6080
      protocol: tcp
      remote_group: { get_resource: os_services_api_client }

  vxlan_tunnel:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Open VXLAN port
      name: VXLAN-tunnel
      rules:
      - direction: ingress
        port_range_min: 4789
        port_range_max: 4789
        protocol: udp
        remote_mode: remote_ip_prefix
        remote_ip_prefix: { get_param: tunnel_net_cidr }

  ceph_control_daemons:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Open ports for Ceph control daemons (MON, MDS, etc.)
      name: ceph-control-daemons

  ceph_storage_daemons:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Open ports for Ceph storage daemons (OSD)
      name: ceph-storage-daemons

  ceph_mon_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: ceph_control_daemons }
      description: Ceph control
      direction: ingress
      port_range_min: 6789
      port_range_max: 6789
      protocol: tcp
      remote_ip_prefix: { get_param: main_net_cidr }
  # Ceph network reference guide suggests to open a whole 6800-7300
  ceph_mgr_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: ceph_control_daemons }
      description: Ceph MGR
      direction: ingress
      port_range_min: 6800
      port_range_max: 7300
      protocol: tcp
      remote_ip_prefix: { get_param: main_net_cidr }

  ceph_osds_port:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: ceph_storage_daemons }
      description: Ceph storage
      direction: ingress
      port_range_min: 6800
      port_range_max: 7300
      protocol: tcp
      remote_ip_prefix: { get_param: main_net_cidr }

# Networks and routers
  main_net:
    type: OS::Neutron::Net
    properties:
      name: main_net

  main_net_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: main_net_subnet
      network_id: { get_resource: main_net }
      cidr: { get_param: main_net_cidr }
      dns_nameservers: [ 8.8.8.8 ]
      enable_dhcp: true

  tunnel_net:
    type: OS::Neutron::Net
    properties:
      name: tunnel_net

  tunnel_net_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: tunnel_net_subnet
      network_id: { get_resource: tunnel_net }
      cidr: { get_param: tunnel_net_cidr }
      enable_dhcp: true

  provider_net:
    type: OS::Neutron::Net
    properties:
      name: provider_net

  provider_net_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: provider_net_subnet
      network_id: { get_resource: provider_net }
      cidr: { get_param: provider_net_cidr }
      enable_dhcp: false

  vip_net:
    type: OS::Neutron::Net
    properties:
      name: vip_net

  vip_net_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: vip_net_subnet
      network_id: { get_resource: vip_net }
      cidr: { get_param: vip_net_cidr }
      enable_dhcp: false

  main_router:
    type: OS::Neutron::Router
    properties:
      name: main_router
      external_gateway_info:
        network: { get_param: external_network }

  main_net_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: main_router }
      subnet: { get_resource: main_net_subnet }

  provider_net_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: main_router }
      subnet: { get_resource: provider_net_subnet }

  control_instances:
    type: OS::Heat::ResourceGroup
    properties:
      count: 3
      resource_def:
        type: OS::Nova::Server
        properties:
          name: control%index%
          image: { get_param: image }
          flavor: { get_param: control_flavour }
          key_name: { get_param: key }
          security_groups:
            - { get_resource: os_services_infra_server }
            - { get_resource: os_services_api_server }
            - { get_resource: ceph_control_daemons }
          networks:
            - network: { get_resource: main_net }
            - network: { get_resource: tunnel_net }
          metadata:
            groups: control

  # TODO: Allow access to HAProxy stats.
  network_instances:
    type: OS::Heat::ResourceGroup
    properties:
      count: 2
      resource_def:
        type: OS::Nova::Server
        properties:
          name: network%index%
          image: { get_param: image }
          flavor: { get_param: network_flavour }
          key_name: { get_param: key }
          security_groups:
            - { get_resource: os_services_infra_server }
            - { get_resource: os_services_infra_client }
            - { get_resource: os_services_api_server }
            - { get_resource: os_services_api_client }
            - { get_resource: vxlan_tunnel }
          networks:
            - subnet: { get_resource: main_net_subnet }
              port_extra_properties:
                allowed_address_pairs:
                - ip_address: { get_param: internal_vip }
            - network: { get_resource: tunnel_net }
            - subnet: { get_resource: provider_net_subnet }
              port_extra_properties:
                allowed_address_pairs:
                - ip_address: { get_param: provider_net_cidr }
            - subnet: { get_resource: vip_net_subnet }
              port_extra_properties:
                allowed_address_pairs:
                - ip_address: { get_param: external_vip }
          metadata:
            groups: network

  compute_instances:
    type: OS::Heat::ResourceGroup
    properties:
      count: 1
      resource_def:
        type: OS::Nova::Server
        properties:
          name: compute%index%
          image: { get_param: image }
          flavor: { get_param: compute_flavour }
          key_name: { get_param: key }
          security_groups:
            - { get_resource: os_services_infra_client }
            - { get_resource: os_services_api_client }
            - { get_resource: vxlan_tunnel }
          networks:
            - network: { get_resource: main_net }
            - network: { get_resource: tunnel_net }
          metadata:
            groups: external-compute

  storage_instances:
    type: OS::Heat::ResourceGroup
    properties:
      count: 1
      resource_def:
        type: OS::Nova::Server
        properties:
          name: storage%index%
          image: { get_param: image }
          flavor: { get_param: storage_flavour }
          key_name: { get_param: key }
          security_groups:
            - { get_resource: os_services_api_client }
            - { get_resource: ceph_storage_daemons }
          networks:
            - network: { get_resource: main_net }
          user_data_format: RAW
          user_data: |
            #!/bin/sh
            dd if=/dev/zero of=/opt/ceph_disk.img bs=1M count=10240
            losetup --show -f -P /opt/ceph_disk.img
            partprobe
          metadata:
            groups: storage

  # Client
  client_router:
    type: OS::Neutron::Router
    properties:
      name: client_router
      external_gateway_info:
        network: { get_param: external_network }

  vip_net_client_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: client_router }
      subnet: { get_resource: vip_net_subnet }

  test_client:
    type: OS::Nova::Server
    properties:
      name: test_client
      image: { get_param: image }
      flavor: { get_param: client_flavour }
      key_name: { get_param: key }
      security_groups:
        - { get_resource: os_services_infra_client }
        - { get_resource: os_services_api_client }
      networks:
        - network: { get_resource: vip_net }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh
            apt-get update
            sudo apt-get install python-pip
            pip install python-openstackclient
            cat << EOF > ~/admin-openrc.sh
            #!/usr/bin/env bash
            export OS_PROJECT_DOMAIN_NAME=Default
            export OS_USER_DOMAIN_NAME=Default
            export OS_PROJECT_NAME=admin
            export OS_TENANT_NAME=admin
            export OS_USERNAME=admin
            echo "Please enter your OpenStack Password for project $OS_PROJECT_NAME as user $OS_USERNAME: "
            read -sr OS_PASSWORD
            export OS_PASSWORD
            export OS_AUTH_URL=http://$ext_vip:5000/v3
            export OS_INTERFACE=public
            export OS_IDENTITY_API_VERSION=3
            export OS_REGION_NAME=RegionOne
            export OS_AUTH_PLUGIN=password
            EOF
          params:
            $ext_vip: { get_param: external_vip }

  # Bastion
  bastion_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Access to the host from the outside world
      name: bastion
      rules:
      - direction: ingress
        port_range_min: 22
        port_range_max: 22
        protocol: tcp
        remote_mode: remote_ip_prefix
        remote_ip_prefix: 0.0.0.0/0
      - direction: ingress
        port_range_min: 1194
        port_range_max: 1194
        protocol: udp
        remote_mode: remote_ip_prefix
        remote_ip_prefix: 0.0.0.0/0

  # SSH into API clients from bastion
  ssh_from_bastion:
    type: OS::Neutron::SecurityGroupRule
    properties:
      security_group: { get_resource: os_services_api_client }
      description: Access to the host from a SSH tunnel through bastion
      direction: ingress
      port_range_min: 22
      port_range_max: 22
      protocol: tcp
      remote_group: { get_resource: bastion_sg }

  bastion_fip_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: main_net }
      fixed_ips:
        - subnet: { get_resource: main_net_subnet }
      security_groups:
        - { get_resource: bastion_sg }

  bastion_fip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: external_network }
      port_id: { get_resource: bastion_fip_port }

  bastion_instance:
    type: OS::Nova::Server
    properties:
      name: bastion
      image: { get_param: image }
      flavor: { get_param: bastion_flavour }
      key_name: { get_param: key }
      networks:
        - port: { get_resource: bastion_fip_port }
        - network: { get_resource: vip_net }
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/sh
            ip link set ens4 up
            dhclient -v ens4
            iptables -t nat -I POSTROUTING -s 10.8.0.0/24 -o ens3 -j MASQUERADE
            iptables -t nat -I POSTROUTING -s 10.8.0.0/24 -d $ext_vip_net -o ens4 -j MASQUERADE
          params:
            $ext_vip_net: {get_param: vip_net_cidr }
      metadata:
        groups: bastions
